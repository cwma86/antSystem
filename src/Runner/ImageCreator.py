#!/usr/bin/env python3
import argparse
import logging
import math
import os
import sys
import cv2 as cv
import numpy as np
import time


script_path = os.path.dirname(os.path.abspath( __file__ ))
# Generic TSP support imports
support_dir = os.path.join(script_path, "..","Support")
sys.path.insert(1, support_dir)
from TspParser import TspParser


def args():
  defaultFilePath = os.path.join(script_path, '..', '..', 'TSPData','pcb10_test.tsp')
  parser = argparse.ArgumentParser(description='Run Ant System')   
  parser.add_argument('--filename', default=defaultFilePath, type=str,
                      help='file path of tsp data')
  args = parser.parse_args()

  # initialize logger format
  logLevel = logging.INFO
  logging.basicConfig(
    format='%(asctime)s,%(msecs)d %(levelname)-8s\
       [%(filename)s:%(lineno)d] %(message)s',
    datefmt='%Y-%m-%d:%H:%M:%S',
    level=logLevel)
  logging.info(f"logging set to {logging.DEBUG}")
 
  return args



def createImage(bestSolution,  tspData):
  #Find Bounds of nodes
  minX, minY, = 999999999999999,999999999999999
  maxX, maxY = 0, 0
  for node in tspData.nodes:
    if node.xCoord > maxX:
      maxX = node.xCoord
    if node.xCoord < minX:
      minX = node.xCoord
    if node.yCoord > maxY:
      maxY = node.yCoord
    if node.yCoord < minY:
      minY = node.yCoord

  #Image height and width
  h = 1000
  w = 1000
  # Create padding on bounds
  xPadding = (maxX - minX) * 0.05
  yPadding = (maxY - minY) * 0.05
  minX -= xPadding
  maxX += xPadding
  minY -= yPadding
  maxY += yPadding

  #Create white image
  img = np.full((h, w, 3), 255, np.uint8)
  #Draw nodes as circles
  for node in tspData.nodes:
    x = int(((node.xCoord - minX) / (maxX - minX)) * w)
    y = int(((node.yCoord - minY) / (maxY - minY)) * h)
    # print(x,y)
    cv.circle(img,(x,y),3,(50,50,50), 3)

  totalDistance = 0
  #Draw paths
  prevNode = tspData.nodes[bestSolution[-1]-1]
  for i in range(len(bestSolution)):
    x = int(((tspData.nodes[bestSolution[i]-1].xCoord - minX) / (maxX - minX)) * w)
    y = int(((tspData.nodes[bestSolution[i]-1].yCoord - minY) / (maxY - minY)) * h)
    x1 = int(((prevNode.xCoord - minX) / (maxX - minX)) * w)
    y1 = int(((prevNode.yCoord - minY) / (maxY - minY)) * h)

    totalDistance += math.dist([tspData.nodes[bestSolution[i] - 1].xCoord, tspData.nodes[bestSolution[i] - 1].yCoord],
                               [prevNode.xCoord, prevNode.yCoord])

    prevNode = tspData.nodes[bestSolution[i]-1]
    cv.line(img, (x, y), (x1, y1), (150, 150, 150), 2, lineType=cv.LINE_4)


  print("Total Distance :", totalDistance)
  #Write image to disk
  cv.imwrite("out.png",img)

def bestSolution():
    #Ulysses 22
    # bestSolution = [1, 8, 5, 11, 9, 10, 21, 20, 19, 7, 6, 15, 14, 13, 12, 16, 3, 2, 17, 4, 18, 22]
    #MCTS fl1577
    bestSolution = [1, 2, 3, 51, 48, 1388, 1299, 1389, 1298, 1390, 1297, 1391, 1296, 1295, 1206, 1207, 1294, 1208, 1293,
                    1209, 1292,
                    1210, 1291, 1211, 1290, 1212, 1289, 1213, 1288, 1214, 1287, 1215, 1286, 1216, 1285, 1217, 1284,
                    1307, 1380, 1381,
                    1306, 1382, 1305, 1383, 1304, 1384, 1303, 1385, 1302, 1386, 1301, 1387, 1300, 1379, 1378, 1308,
                    1377, 1309, 1376,
                    1310, 1375, 1282, 1283, 1219, 1218, 1374, 1220, 1311, 1373, 1312, 1372, 1281, 1222, 1280, 1223,
                    1371, 1370, 1279,
                    1224, 1278, 1225, 1277, 1314, 1368, 1315, 1367, 1226, 1227, 1228, 1276, 1229, 1275, 1316, 1366,
                    1365, 1313, 1369,
                    1221, 10, 9, 20, 19, 18, 17, 41, 43, 40, 44, 39, 45, 38, 46, 37, 55, 74, 81, 94, 99, 93, 100, 92,
                    82, 72, 53, 54, 73,
                    71, 83, 84, 70, 85, 116, 129, 128, 117, 127, 118, 126, 119, 120,
                    121, 122, 123, 124, 125, 102, 88, 67, 66, 89, 103, 104, 90, 65, 64, 91, 105, 63, 31, 30, 29, 32, 28,
                    33, 27, 34, 35,
                    50, 36, 49, 62, 61, 52, 60, 47, 26, 15, 14, 13, 12, 69, 86, 87, 68, 59, 25, 24, 23, 22, 5, 4, 6, 7,
                    11, 16, 42, 77,
                    76, 78, 75, 79, 80, 95, 106, 114, 107, 113, 108, 112, 109, 111, 110, 98, 97, 96, 58, 57, 56, 21, 8,
                    115, 134, 133,
                    132, 131, 130, 101, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
                    179, 180, 181,
                    182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 157, 199, 156,
                    200, 155, 201,
                    154, 202, 153, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
                    220, 221, 222,
                    223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
                    243, 244, 245,
                    246, 247, 248, 249,
                    250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
                    270, 271, 272,
                    273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
                    293, 294, 295,
                    296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 384, 383, 382, 381,
                    380, 379, 378,
                    377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358,
                    357, 356, 355,
                    354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335,
                    334, 333, 332,
                    331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312,
                    489, 488, 487,
                    486, 485, 484, 430, 483, 431, 482, 432, 481, 433, 480, 434, 479, 435, 478, 436, 477, 437, 476, 438,
                    475, 439, 474,
                    440, 473, 441, 472, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 503, 490, 504, 505,
                    506, 429, 428,
                    427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408,
                    407, 406, 405,
                    404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385,
                    448, 447, 446,
                    445, 444, 443, 442, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
                    465, 466, 467,
                    468, 469, 470, 471, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508,
                    507, 610, 611,
                    612, 613, 614, 615, 609, 616, 608, 617, 607, 618, 606, 619, 605, 620, 604, 621, 603, 622, 602, 623,
                    601, 624, 600,
                    625, 599, 626, 598, 627, 597, 628, 596, 629, 595, 630, 594, 631, 593, 632, 592, 633, 591, 634, 590,
                    635, 589, 636,
                    588, 637, 587, 638, 586, 639, 585, 640, 584, 641, 583, 642, 582, 643, 581, 644, 580, 645, 579, 646,
                    578, 647, 577,
                    648, 576, 649, 575, 650, 574, 651, 573, 652, 572, 653, 571, 654, 570, 655, 569, 656, 568, 657, 567,
                    566, 565, 564,
                    563, 562, 561, 560, 559, 558, 557, 746, 808, 877, 807, 747, 806, 748, 805, 879, 878, 880, 804, 749,
                    750, 803, 751,
                    802, 752, 801, 753, 800, 754, 799, 755, 886, 887, 756, 757, 888, 889, 758, 759, 890, 891, 760, 761,
                    892, 893, 762,
                    763, 894, 895, 764, 765, 896, 897, 766, 767, 898, 899, 768, 769, 900, 901, 770, 771, 902, 903, 772,
                    773, 904, 905,
                    774, 775, 906, 907, 776, 777, 908, 909, 778, 779, 910, 911, 780, 781, 912, 913, 782, 783, 914, 915,
                    784, 785, 916,
                    917, 786, 787, 918, 919, 788, 789, 920, 921, 790, 791, 922, 923, 792, 793, 924, 925, 794, 795, 926,
                    927, 796, 797,
                    928, 798, 714, 701, 715, 700, 716, 699, 717, 698, 718, 697, 719, 696, 720, 695, 721, 694, 722, 693,
                    723, 692, 724,
                    691, 725, 690, 726, 689, 727, 688, 728, 687, 729, 686, 730, 685, 731, 684, 732, 683, 733, 682, 734,
                    681, 735, 680,
                    736, 679, 737, 678, 738, 677, 739, 676, 740, 675, 741, 674, 742, 673, 743, 672, 744, 671, 745, 670,
                    669, 668, 667,
                    666, 665, 664, 663, 662, 661, 660, 659, 658, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546,
                    545, 544, 543,
                    542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 702,
                    713, 703, 712,
                    704, 711, 710, 709, 708, 707, 706, 705, 162, 161, 160, 159, 158, 150, 149, 148, 147, 146, 145, 144,
                    143, 135, 885,
                    884, 883, 882, 881, 876, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
                    824, 825, 826,
                    827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
                    847, 848, 849,
                    850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
                    870, 871, 872,
                    873, 874, 875, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035,
                    1034, 1033, 1032,
                    1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016,
                    1015, 993, 964, 955,
                    965, 992, 966, 991, 967, 954, 968, 953, 969, 952, 970, 951, 950, 971, 989, 995, 1010, 996, 988, 997,
                    987, 973, 949,
                    974, 948, 975, 947, 976, 946, 945, 944, 999, 1052, 1053, 1061, 1079, 1080, 1076, 1051, 998, 1050,
                    1075, 1074, 1073,
                    1088, 1087, 1072, 1062, 1071, 1081, 1070, 1082, 1064, 1063, 994, 972, 1009, 1008, 1007, 986, 1091,
                    1000, 1001, 985,
                    1002, 984, 1003, 983, 979, 941, 980, 940, 981, 1004, 1058, 1057, 1005, 1056, 1006, 1055, 1077, 1054,
                    1078, 1090,
                    1089, 1102, 1101, 1098, 1100, 1099, 1059, 1060, 937, 938, 939, 982, 942, 978, 943, 977, 1083, 1049,
                    1011, 1012, 990,
                    1013, 1014, 1069, 1084, 1086, 1085, 1068, 1067, 1066, 1065, 1097, 1096, 1095, 1094, 1093, 1092, 963,
                    956, 957, 962,
                    958, 961, 959, 960, 933, 932, 931, 930, 934, 929, 935, 936, 1140, 1141, 1142, 1143, 1144, 1145,
                    1146, 1147, 1148,
                    1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
                    1165, 1166, 1167,
                    1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
                    1184, 1185, 1186,
                    1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1392,
                    1440, 1482, 1524,
                    1483, 1441, 1394, 1442, 1395, 1443, 1485, 1527, 1486, 1444, 1397, 1445, 1398, 1446, 1399, 1447,
                    1489, 1531, 1490,
                    1448, 1401, 1449, 1402, 1450, 1492, 1534, 1493, 1451, 1403, 1535, 1533, 1491, 1532, 1400, 1530,
                    1488, 1529, 1487,
                    1528, 1396, 1526, 1484, 1525, 1393, 1577, 1576, 1523, 1575, 1522, 1574, 1521, 1573, 1480, 1481,
                    1438, 1439, 1572,
                    1437, 1520, 1571, 1519, 1570, 1479, 1435, 1478, 1434, 1569, 1568, 1477, 1433, 1476, 1432, 1475,
                    1517, 1566, 1516,
                    1565, 1431, 1430, 1429, 1474, 1428, 1473, 1515, 1564, 1563, 1518, 1567, 1436, 1202, 1139, 1138,
                    1203, 1204, 1137,
                    1136, 1205, 1135, 1134, 1133, 1132, 1131, 1130, 1129, 1128, 1127, 1126, 1125, 1124, 1123, 1122,
                    1121, 1120, 1119,
                    1118, 1117, 1116, 1115, 1114, 1113, 1112, 1111, 1110, 1109, 1108, 1107, 1106, 1105, 1104, 1103,
                    1413, 1460, 1503,
                    1544, 1502, 1459, 1411, 1458, 1501, 1542, 1500, 1457, 1410, 1409, 1456, 1408, 1455, 1407, 1454,
                    1497, 1539, 1498,
                    1540, 1499, 1541, 1543, 1412, 1461, 1414, 1462, 1415, 1463, 1505, 1547, 1546, 1504, 1545, 1562,
                    1561, 1514, 1560,
                    1513, 1559, 1512, 1558, 1471, 1472, 1426, 1427, 1557, 1425, 1511, 1556, 1510, 1555, 1470, 1423,
                    1469, 1422, 1554,
                    1553, 1468, 1421, 1467, 1420, 1466, 1508, 1551, 1507, 1550, 1419, 1418, 1417, 1465, 1416, 1464,
                    1506, 1549, 1548,
                    1509, 1552, 1424, 1538, 1496, 1453, 1405, 1452, 1495, 1536, 1494, 1404, 1406, 1537, 151, 152, 142,
                    141, 140, 139,
                    138, 137, 136, 1346, 1332, 1333, 1345, 1260, 1246, 1259, 1247, 1344, 1343, 1258, 1248, 1257, 1249,
                    1256, 1334, 1342,
                    1335, 1341, 1336, 1340, 1250, 1251, 1252, 1255, 1253, 1254, 1337, 1339, 1338, 1245, 1244, 1347,
                    1348, 1331, 1349,
                    1330, 1350, 1329, 1351, 1352, 1242, 1243, 1262, 1261, 1263, 1241, 1264, 1240, 1265, 1239, 1266,
                    1238, 1267, 1237,
                    1268, 1236, 1269, 1235, 1270, 1234, 1271, 1233, 1272, 1232, 1273, 1231, 1274, 1230, 1317, 1364,
                    1318, 1363, 1319,
                    1362, 1320, 1361, 1321, 1360, 1322, 1359, 1323, 1358, 1324, 1357, 1325, 1356, 1326, 1355, 1327,
                    1354, 1328, 1353]
    return bestSolution

if __name__ == "__main__":
  start = time.time()
  inputargs = args()
  tspData = TspParser(inputargs.filename)
  end = time.time()
  print(f"Elapsed Time: {(end-start)*1000:0.2f} milliseconds")
  createImage( bestSolution(),  tspData)